import java.util.Stack;

class QueueStack<T> {
    private Stack<T> stack1; // Used for enqueue
    private Stack<T> stack2; // Used for dequeue

    // Constructor
    public QueueStack() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }

    // Enqueue operation (Push element into queue)
    public void enqueue(T item) {
        stack1.push(item);
        System.out.println("Enqueued: " + item);
    }

    // Dequeue operation (Remove element from queue)
    public T dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty! Cannot dequeue.");
        }

        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop()); // Move elements from stack1 to stack2
            }
        }
        return stack2.pop();
    }

    // Peek operation (View front element without removing)
    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty! Cannot peek.");
        }

        if (stack2.isEmpty()) {
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.peek();
    }

    // Check if queue is empty
    public boolean isEmpty() {
        return stack1.isEmpty() && stack2.isEmpty();
    }

    // Get the size of the queue
    public int getSize() {
        return stack1.size() + stack2.size();
    }

    public static void main(String[] args) {
        QueueStack<Integer> queue = new QueueStack<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        System.out.println("Front element: " + queue.peek()); // Output: 10
        System.out.println("Dequeued: " + queue.dequeue());   // Output: 10
        System.out.println("Dequeued: " + queue.dequeue());   // Output: 20

        queue.enqueue(40);
        queue.enqueue(50);

        System.out.println("Front element: " + queue.peek()); // Output: 30
        System.out.println("Queue size: " + queue.getSize()); // Output: 3
    }
}

import java.util.LinkedList;
import java.util.Queue;

class StackQueue<T> {
    private Queue<T> queue1;
    private Queue<T> queue2;

    // Constructor
    public StackQueue() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }

    // Push operation (O(n) complexity)
    public void push(T item) {
        // Move all elements from queue1 to queue2
        while (!queue1.isEmpty()) {
            queue2.add(queue1.remove());
        }
        
        // Add new element to queue1
        queue1.add(item);
        System.out.println("Pushed: " + item);

        // Move all elements back from queue2 to queue1
        while (!queue2.isEmpty()) {
            queue1.add(queue2.remove());
        }
    }

    // Pop operation (O(1) complexity)
    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty! Cannot pop.");
        }
        return queue1.remove();
    }

    // Peek operation (View top element without removing)
    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty! Cannot peek.");
        }
        return queue1.peek();
    }

    // Check if stack is empty
    public boolean isEmpty() {
        return queue1.isEmpty();
    }

    // Get the size of the stack
    public int getSize() {
        return queue1.size();
    }

    public static void main(String[] args) {
        StackQueue<Integer> stack = new StackQueue<>();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println("Top element: " + stack.peek()); // Output: 30
        System.out.println("Popped: " + stack.pop());       // Output: 30
        System.out.println("Popped: " + stack.pop());       // Output: 20

        stack.push(40);
        stack.push(50);

        System.out.println("Top element: " + stack.peek()); // Output: 50
        System.out.println("Stack size: " + stack.getSize()); // Output: 3
    }
}
